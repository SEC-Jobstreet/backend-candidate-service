// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: candidate_profile.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCandidateProfile = `-- name: CreateCandidateProfile :one
INSERT INTO candidate_profile (user_id,
                               created_at,
                               updated_at)
VALUES ($1, now(), now()) RETURNING user_id, google_id, email, first_name, last_name, profile_image, first_name_profile, last_name_profile, phone, phone_number_country, address, current_location, privacy_setting, resume_link, resume, "current_role", work_whenever, work_shift, location_lat, location_lon, visa, description, position, start_date, share_profile, updated_at, created_at
`

func (q *Queries) CreateCandidateProfile(ctx context.Context, userID string) (CandidateProfile, error) {
	row := q.db.QueryRow(ctx, createCandidateProfile, userID)
	var i CandidateProfile
	err := row.Scan(
		&i.UserID,
		&i.GoogleID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.ProfileImage,
		&i.FirstNameProfile,
		&i.LastNameProfile,
		&i.Phone,
		&i.PhoneNumberCountry,
		&i.Address,
		&i.CurrentLocation,
		&i.PrivacySetting,
		&i.ResumeLink,
		&i.Resume,
		&i.CurrentRole,
		&i.WorkWhenever,
		&i.WorkShift,
		&i.LocationLat,
		&i.LocationLon,
		&i.Visa,
		&i.Description,
		&i.Position,
		&i.StartDate,
		&i.ShareProfile,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCandidateProfiles = `-- name: GetCandidateProfiles :many

SELECT user_id,
       google_id,
       COALESCE(email, '')                AS email,
       COALESCE(first_name, '')           AS first_name,
       COALESCE(last_name, '')            AS last_name,
       COALESCE(profile_image, '')        AS profile_image,
       COALESCE(first_name_profile, '')   AS first_name_profile,
       COALESCE(last_name_profile, '')    AS last_name_profile,
       COALESCE(phone, '')                AS phone,
       COALESCE(phone_number_country, '') AS phone_number_country,
       COALESCE(address, '')              AS address,
       COALESCE(current_location, '')     AS current_location,
       COALESCE(privacy_setting, '')      AS privacy_setting,
       COALESCE(resume_link, '')          AS resume_link,
       COALESCE(resume, '')               AS resume,
       COALESCE("current_role", '')       AS current_role,
       work_whenever,
       COALESCE("work_shift", '')         AS work_shift,
       COALESCE(location_lat, 0.0)        AS location_lat,
       COALESCE(location_lon, 0.0)        AS location_lon,
       visa,
       COALESCE(description, '')          AS description,
       COALESCE(position, '') AS position,
    COALESCE(start_date, '1970-01-01') AS start_date, -- Assuming DATE type, default to UNIX epoch start
    share_profile,
    updated_at,
    created_at
FROM public.candidate_profile
WHERE user_id = $1
`

type GetCandidateProfilesRow struct {
	UserID             string      `json:"user_id"`
	GoogleID           pgtype.Int8 `json:"google_id"`
	Email              string      `json:"email"`
	FirstName          string      `json:"first_name"`
	LastName           string      `json:"last_name"`
	ProfileImage       string      `json:"profile_image"`
	FirstNameProfile   string      `json:"first_name_profile"`
	LastNameProfile    string      `json:"last_name_profile"`
	Phone              string      `json:"phone"`
	PhoneNumberCountry string      `json:"phone_number_country"`
	Address            string      `json:"address"`
	CurrentLocation    string      `json:"current_location"`
	PrivacySetting     string      `json:"privacy_setting"`
	ResumeLink         string      `json:"resume_link"`
	Resume             string      `json:"resume"`
	CurrentRole        string      `json:"current_role"`
	WorkWhenever       pgtype.Bool `json:"work_whenever"`
	WorkShift          string      `json:"work_shift"`
	LocationLat        float64     `json:"location_lat"`
	LocationLon        float64     `json:"location_lon"`
	Visa               pgtype.Bool `json:"visa"`
	Description        string      `json:"description"`
	Position           string      `json:"position"`
	StartDate          pgtype.Date `json:"start_date"`
	ShareProfile       pgtype.Bool `json:"share_profile"`
	UpdatedAt          time.Time   `json:"updated_at"`
	CreatedAt          time.Time   `json:"created_at"`
}

// -- name: CreateApplication :one
// INSERT INTO applications (
//
//	candidate_id,
//	job_id,
//	status
//
// ) VALUES (
//
//	$1, $2, $3
//
// ) RETURNING *;
//
// -- name: GetApplication :one
// SELECT * FROM applications
// WHERE id = $1 LIMIT 1;
//
// -- name: ListApplications :many
// SELECT * FROM applications
// WHERE
//
//	(candidate_id = @candidate_id OR @candidate_id = 0)
//	AND (job_id = @job_id OR @job_id = 0)
//	AND (status = @status OR @status = '')
//
// ORDER BY id
// LIMIT @l
// OFFSET @o;
//
// -- name: UpdateStatusApplication :one
// UPDATE applications
// SET
//
//	status = sqlc.arg(status),
//	message = COALESCE(sqlc.narg(message), message),
//	updated_at = sqlc.arg(updated_at)
//
// WHERE
//
//	id = sqlc.arg(id)
//
// RETURNING *;
func (q *Queries) GetCandidateProfiles(ctx context.Context, userID string) ([]GetCandidateProfilesRow, error) {
	rows, err := q.db.Query(ctx, getCandidateProfiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCandidateProfilesRow{}
	for rows.Next() {
		var i GetCandidateProfilesRow
		if err := rows.Scan(
			&i.UserID,
			&i.GoogleID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.ProfileImage,
			&i.FirstNameProfile,
			&i.LastNameProfile,
			&i.Phone,
			&i.PhoneNumberCountry,
			&i.Address,
			&i.CurrentLocation,
			&i.PrivacySetting,
			&i.ResumeLink,
			&i.Resume,
			&i.CurrentRole,
			&i.WorkWhenever,
			&i.WorkShift,
			&i.LocationLat,
			&i.LocationLon,
			&i.Visa,
			&i.Description,
			&i.Position,
			&i.StartDate,
			&i.ShareProfile,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
